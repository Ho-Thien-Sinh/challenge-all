import { createClient, SupabaseClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '../.env' });

// Initialize Supabase client
const supabaseUrl = process.env.SUPABASE_URL || '';
const supabaseKey = process.env.SUPABASE_ANON_KEY || '';

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå L·ªói: Thi·∫øu th√¥ng tin c·∫•u h√¨nh Supabase. Vui l√≤ng ki·ªÉm tra file .env');
  process.exit(1);
}

const supabase: SupabaseClient = createClient(supabaseUrl, supabaseKey);

console.log('üîó ƒê√£ k·∫øt n·ªëi ƒë·∫øn Supabase');

// H√†m tr√≠ch xu·∫•t URL ·∫£nh t·ª´ excerpt
function extractImageFromExcerpt(excerpt: string): string | null {
  if (!excerpt) return null;
  
  // T√¨m t·∫•t c·∫£ c√°c th·∫ª img trong excerpt
  const imgRegex = /<img[^>]+src="([^">]+)"/g;
  let match;
  let lastMatch = null;
  
  while ((match = imgRegex.exec(excerpt)) !== null) {
    lastMatch = match[1];
  }
  
  return lastMatch || null;
}

// H√†m c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán cho b√†i vi·∫øt
async function updateArticleImages() {
  try {
    console.log('üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán cho b√†i vi·∫øt...');
    
    // L·∫•y t·∫•t c·∫£ b√†i vi·∫øt ch∆∞a c√≥ ·∫£nh ƒë·∫°i di·ªán
    const { data: articles, error } = await supabase
      .from('articles')
      .select('*')
      .or('image_url.is.null,image_url.eq.');
    
    if (error) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt:', error);
      return;
    }
    
    console.log(`üìä T√¨m th·∫•y ${articles?.length || 0} b√†i vi·∫øt c·∫ßn c·∫≠p nh·∫≠t ·∫£nh`);
    
    if (!articles || articles.length === 0) {
      console.log('‚úÖ Kh√¥ng c√≥ b√†i vi·∫øt n√†o c·∫ßn c·∫≠p nh·∫≠t');
      return;
    }
    
    let updatedCount = 0;
    
    // Duy·ªát qua t·ª´ng b√†i vi·∫øt
    for (const article of articles) {
      try {
        const excerpt = article.excerpt || '';
        const imageUrl = extractImageFromExcerpt(excerpt);
        
        if (imageUrl) {
          // C·∫≠p nh·∫≠t tr∆∞·ªùng image_url
          const { error: updateError } = await supabase
            .from('articles')
            .update({ 
              image_url: imageUrl,
              updated_at: new Date().toISOString()
            })
            .eq('id', article.id);
          
          if (updateError) {
            console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt ${article.id}:`, updateError.message);
          } else {
            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ·∫£nh cho b√†i vi·∫øt: ${article.title.substring(0, 50)}...`);
            updatedCount++;
          }
        } else {
          console.log(`‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y ·∫£nh trong excerpt c·ªßa b√†i vi·∫øt: ${article.title.substring(0, 50)}...`);
        }
        
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ tr√°nh b·ªã ch·∫∑n b·ªüi rate limiting
        await new Promise(resolve => setTimeout(resolve, 500));
        
      } catch (error) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω b√†i vi·∫øt ${article.id}:`, error);
      }
    }
    
    console.log(`\n‚úÖ Ho√†n th√†nh! ƒê√£ c·∫≠p nh·∫≠t ${updatedCount}/${articles.length} b√†i vi·∫øt`);
    
  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error);
  }
}

// Ch·∫°y h√†m c·∫≠p nh·∫≠t
updateArticleImages();
