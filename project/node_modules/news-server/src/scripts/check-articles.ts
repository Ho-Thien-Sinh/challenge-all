import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL || '';
const supabaseKey = process.env.SUPABASE_KEY || '';

if (!supabaseUrl || !supabaseKey) {
  console.error('Thi·∫øu c·∫•u h√¨nh SUPABASE_URL ho·∫∑c SUPABASE_KEY trong file .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkArticles() {
  try {
    console.log('üîç ƒêang ki·ªÉm tra d·ªØ li·ªáu b√†i vi·∫øt...');
    
    // Count total number of articles
    const { count, error: countError } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true });
      
    if (countError) throw countError;
    
    console.log(`üìä T·ªïng s·ªë b√†i vi·∫øt trong database: ${count}`);
    
    // Get 5 latest articles
    const { data: latestArticles, error: articlesError } = await supabase
      .from('articles')
      .select('*')
      .order('published_at', { ascending: false })
      .limit(5);
      
    if (articlesError) throw articlesError;
    
    console.log('\nüì∞ 5 b√†i vi·∫øt m·ªõi nh·∫•t:');
    console.log('‚îÄ'.repeat(80));
    
    latestArticles?.forEach((article: any, index: number) => {
      console.log(`\n${index + 1}. ${article.title}`);
      console.log(`   üìå Danh m·ª•c: ${article.category || 'Ch∆∞a ph√¢n lo·∫°i'}`);
      console.log(`   üìÖ ${new Date(article.published_at).toLocaleString()}`);
      console.log(`   üîó ${article.url}`);
    });
    
    // Check number of articles per category
    // Way 2: Using RPC
const { data: categories, error: catError } = await supabase
.rpc('get_article_counts');

if (categories) {
console.log('\nüìä S·ªë b√†i vi·∫øt theo danh m·ª•c:');
console.log('‚îÄ'.repeat(30));
categories.forEach((cat: any) => {
  console.log(`- ${cat.category}: ${cat.count} b√†i`);
});
}
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra d·ªØ li·ªáu:');
    console.error(error);
  }
}

checkArticles();
