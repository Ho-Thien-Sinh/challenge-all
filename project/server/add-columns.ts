import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

async function addMissingColumns() {
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_ANON_KEY;
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    console.log('üîß B·∫Øt ƒë·∫ßu th√™m c√°c c·ªôt thi·∫øu v√†o b·∫£ng articles...');
    
    const columnsToAdd = [
        { name: 'excerpt', type: 'TEXT', description: 'T√≥m t·∫Øt ng·∫Øn b√†i vi·∫øt' },
        { name: 'image', type: 'TEXT', description: 'Link ·∫£nh ph·ª•' },
        { name: 'link', type: 'TEXT', description: 'Li√™n k·∫øt b√†i vi·∫øt' },
        { name: 'source', type: 'TEXT', description: 'Ngu·ªìn b√†i vi·∫øt' },
        { name: 'url', type: 'TEXT', description: 'URL b√†i vi·∫øt' }
    ];
    
    try {
        for (const column of columnsToAdd) {
            console.log(`üìù Th√™m c·ªôt: ${column.name} (${column.description})`);
            
            const { data, error } = await supabase.rpc('exec_sql', {
                sql: `ALTER TABLE articles ADD COLUMN IF NOT EXISTS ${column.name} ${column.type};`
            });
            
            if (error) {
                console.error(`‚ùå L·ªói khi th√™m c·ªôt ${column.name}:`, error.message);
            } else {
                console.log(`‚úÖ ƒê√£ th√™m c·ªôt ${column.name} th√†nh c√¥ng`);
            }
        }
        
        // T·∫°o index cho c√°c c·ªôt quan tr·ªçng
        console.log('üîç T·∫°o index cho c√°c c·ªôt...');
        const indexes = [
            'CREATE INDEX IF NOT EXISTS idx_articles_url ON articles(url);',
            'CREATE INDEX IF NOT EXISTS idx_articles_link ON articles(link);',
            'CREATE INDEX IF NOT EXISTS idx_articles_source ON articles(source);'
        ];
        
        for (const indexSql of indexes) {
            const { error } = await supabase.rpc('exec_sql', { sql: indexSql });
            if (error) {
                console.error('‚ùå L·ªói khi t·∫°o index:', error.message);
            } else {
                console.log('‚úÖ T·∫°o index th√†nh c√¥ng');
            }
        }
        
        // Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng sau khi th√™m
        console.log('üîç Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng sau khi c·∫≠p nh·∫≠t...');
        const { data: tableData, error: tableError } = await supabase
            .from('articles')
            .select('*')
            .limit(1);
            
        if (!tableError && tableData && tableData.length > 0) {
            console.log('‚úÖ C√°c c·ªôt hi·ªán c√≥ trong b·∫£ng articles:');
            console.log(Object.keys(tableData[0]).sort());
        }
        
        console.log('üéâ Ho√†n th√†nh vi·ªác c·∫≠p nh·∫≠t c·∫•u tr√∫c b·∫£ng!');
        
    } catch (error) {
        console.error('‚ùå L·ªói t·ªïng qu√°t:', error);
    }
}

addMissingColumns();