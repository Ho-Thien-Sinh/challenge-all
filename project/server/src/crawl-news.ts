import axios, { AxiosInstance } from 'axios';
import * as cheerio from 'cheerio';
import { NewsCrawler } from './crawler.js';
import dotenv from 'dotenv';

declare module 'cheerio' {
  interface Cheerio<T> {
    // ƒê·ªãnh nghƒ©a c√°c ph∆∞∆°ng th·ª©c t√πy ch·ªânh n·∫øu c·∫ßn
  }
  
  interface Element {
    // ƒê·ªãnh nghƒ©a c√°c thu·ªôc t√≠nh t√πy ch·ªânh n·∫øu c·∫ßn
  }
}

// Load environment variables
dotenv.config();

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu
interface ArticleInfo {
  url: string;
  title: string;
}

// Main function
async function main() {
  const axiosInstance: AxiosInstance = axios.create({
    timeout: 30000, // 30 gi√¢y timeout
    headers: {
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
      'Accept-Language': 'vi,en-US;q=0.7,en;q=0.3',
      'Referer': 'https://www.google.com/',
      'DNT': '1',
      'Connection': 'keep-alive',
      'Upgrade-Insecure-Requests': '1',
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache'
    }
  });

  // H√†m t·∫£i n·ªôi dung trang web
  async function fetchPage(url: string): Promise<string> {
    try {
      console.log(`üîç ƒêang t·∫£i: ${url}`);
      const response = await axiosInstance.get(url);
      return response.data;
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      console.error(`‚ùå L·ªói khi t·∫£i trang ${url}:`, errorMessage);
      throw error;
    }
  }

  // H√†m l·∫•y danh s√°ch b√†i vi·∫øt t·ª´ trang ch·ªß
  async function getHomepageArticles(): Promise<ArticleInfo[]> {
    try {
      const html = await fetchPage('https://tuoitre.vn');
      const $ = cheerio.load(html);
      
      const articles: ArticleInfo[] = [];
      
      // L·∫•y c√°c b√†i vi·∫øt n·ªïi b·∫≠t
      $('h3.title-news a, .box-category a, .box-title-text a').each((_index: number, element) => {
        const url = $(element).attr('href');
        const title = $(element).text().trim();
        
        if (url && url.endsWith('.htm') && title) {
          const fullUrl = url.startsWith('http') ? url : `https://tuoitre.vn${url}`;
          articles.push({
            url: fullUrl,
            title: title
          });
        }
      });
      
      return articles;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt:', error);
      return [];
    }
  }

  // T·∫°o instance crawler v·ªõi c·∫•u h√¨nh t√πy ch·ªânh
  const crawler = new NewsCrawler('https://tuoitre.vn', {
    maxConcurrent: 1,       // S·ªë l∆∞·ª£ng request ƒë·ªìng th·ªùi
    delayMs: 3000,          // Th·ªùi gian ch·ªù gi·ªØa c√°c request (ms)
    maxRetries: 3,          // S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa
    batchSize: 5,           // S·ªë b√†i vi·∫øt x·ª≠ l√Ω m·ªói l·∫ßn
    pagesToCrawl: 2,        // S·ªë trang c·∫ßn crawl
    timeout: 30000,         // Th·ªùi gian ch·ªù t·∫£i trang (30s)
    debug: true            // B·∫≠t ch·∫ø ƒë·ªô debug
  });

  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu thu th·∫≠p d·ªØ li·ªáu t·ª´ Tu·ªïi Tr·∫ª Online');
    console.log('='.repeat(60));
    
    // L·∫•y danh s√°ch b√†i vi·∫øt t·ª´ trang ch·ªß
    console.log('\nüì∞ ƒêang l·∫•y danh s√°ch b√†i vi·∫øt...');
    const articles = await getHomepageArticles();
    
    console.log(`‚úÖ T√¨m th·∫•y ${articles.length} b√†i vi·∫øt`);
    console.log('\n============================================================');
    
    // H√†m c·∫Øt ng·∫Øn vƒÉn b·∫£n
    function truncate(str: string, maxLength: number): string {
      if (str.length <= maxLength) return str;
      return str.substring(0, maxLength - 3) + '...';
    }

    // H√†m hi·ªÉn th·ªã danh s√°ch b√†i vi·∫øt
    function displayArticles(articles: ArticleInfo[], count: number = 10) {
      const line = '‚îÄ'.repeat(80);
      console.log('\n' + 'üìã DANH S√ÅCH B√ÄI VI·∫æT M·ªöI NH·∫§T'.padEnd(80, ' '));
      console.log(line);
      
      articles.slice(0, count).forEach((article, index) => {
        console.log(`\n${(index + 1).toString().padStart(2, ' ')}. ${truncate(article.title, 70)}`);
        console.log(`   üîó ${truncate(article.url, 70)}`);
      });
      console.log('\n' + line);
    }

    displayArticles(articles);

    // X·ª≠ l√Ω t·ª´ng b√†i vi·∫øt
    for (let i = 0; i < Math.min(5, articles.length); i++) {
      const article = articles[i];
      try {
        process.stdout.write(`   ‚è≥ [${i + 1}/${Math.min(5, articles.length)}] ƒêang x·ª≠ l√Ω: ${article.title.substring(0, 50)}${article.title.length > 50 ? '...' : ''} `);
        
        try {
          // X·ª≠ l√Ω b√†i vi·∫øt
          const result = await crawler.processArticle(article.url, 'thoi-su');
          
          if (result) {
            // √âp ki·ªÉu t·∫°m th·ªùi ƒë·ªÉ tr√°nh l·ªói TypeScript
            const article = result as any;
            
            console.log('\n   ‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng:');
            console.log(`   üìå Ti√™u ƒë·ªÅ: ${truncate(article.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ', 60)}`);
            console.log(`   üìÖ Ng√†y ƒëƒÉng: ${article.published_at ? new Date(article.published_at).toLocaleString() : 'Kh√¥ng r√µ'}`);
            console.log(`   üë§ T√°c gi·∫£: ${article.author || 'Kh√¥ng r√µ'}`);
            
            // Hi·ªÉn th·ªã m√¥ t·∫£ n·∫øu c√≥
            if (article.description) {
              console.log(`   üìù ${truncate(article.description, 100)}`);
            }
            
            // Hi·ªÉn th·ªã ·∫£nh n·∫øu c√≥
            if (article.image) {
              console.log(`   üñºÔ∏è ·∫¢nh ƒë·∫°i di·ªán: ${truncate(article.image, 60)}`);
            }
          } else {
            console.log('\n   ‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω b√†i vi·∫øt');
          }
        } catch (error: unknown) {
          const errorMessage = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
          console.log(`\n   ‚ùå L·ªói khi x·ª≠ l√Ω b√†i vi·∫øt: ${errorMessage}`);
          
          // Ghi log l·ªói chi ti·∫øt
          if (error instanceof Error) {
            console.error(`   Chi ti·∫øt l·ªói: ${error.stack || error.message}`);
          }
          
          // Ti·∫øp t·ª•c v·ªõi b√†i vi·∫øt ti·∫øp theo thay v√¨ d·ª´ng l·∫°i
          continue;
        }
        
        // ƒê·ª£i m·ªôt ch√∫t gi·ªØa c√°c b√†i vi·∫øt ƒë·ªÉ tr√°nh b·ªã block
        if (i < Math.min(4, articles.length - 1)) {
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      } catch (error: unknown) {
        process.stdout.write('‚ùå\n');
        const errorMessage = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
        console.error(`   L·ªói: ${errorMessage}`);
      }
    }
    
    console.log('\n‚ú® Ho√†n th√†nh thu th·∫≠p d·ªØ li·ªáu!');
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh ch·∫°y:', error);
    // D·ªçn d·∫πp t√†i nguy√™n
    console.log('\nüßπ Cleaning up...');
    try {
      if (crawler) {
        await crawler.cleanup();
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi d·ªçn d·∫πp t√†i nguy√™n:', error);
    }
    process.exit(0);
  }
}

// X·ª≠ l√Ω t√≠n hi·ªáu d·ª´ng
process.on('SIGINT', async () => {
  console.log('\nüõë Received SIGINT. Stopping crawler...');
  process.exit(0);
});

// B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh
main().catch(error => {
  const errorMessage = error instanceof Error ? error.message : 'Unknown error';
  console.error('‚ùå Failed to start crawler:', errorMessage);
  process.exit(1);
});
